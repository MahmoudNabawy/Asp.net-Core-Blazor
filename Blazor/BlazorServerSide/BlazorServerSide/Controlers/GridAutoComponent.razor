@typeparam IItem

@using System.Reflection;


@if (memberInfo != null && memberInfo.Length > 0)
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var member in memberInfo)
                {
                    @if (member.MemberType == MemberTypes.Property &&
                       !ColumnsToExcludeCSV.Contains(member.Name, StringComparison.OrdinalIgnoreCase))
                    {
                        <th>
                            @member.Name
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    @foreach (var member in memberInfo)
                    {
                        @if (member.MemberType == MemberTypes.Property &&
                      !ColumnsToExcludeCSV.Contains(member.Name, StringComparison.OrdinalIgnoreCase))
                        {
                            <td>
                                @item.GetType().GetProperty(member.Name).GetValue(item)
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {

    MemberInfo[] memberInfo;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Items != null && Items.Count > 0)
        {
            Type typeOfItem = this.Items[0].GetType();
            memberInfo = typeOfItem.GetMembers();

        }
    }

    [Parameter]
    public List<IItem> Items { get; set; }

    [Parameter]
    public string ColumnsToExcludeCSV { get; set; }
}
